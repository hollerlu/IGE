popup = ~popupText,
clusterOptions = markerClusterOptions())
})
# ethnicity bar chart
output$plot_ethnicity <- renderPlotly({
ocs_filter <- dataFile %>%
filter(Ethnicity != "") %>%
filter(ProgramRegion %in% input$region) #%>%
# group_by(CountryName, Ethnicity) %>%
# summarise(NumStudents = n_distinct(X)) %>%
# ungroup()
plot_ly(ocs_filter,
x = ~CountryName,
color = ~Ethnicity,
type = "histogram"
# hoverinfo = "text",
#hovertext = paste("Number of students: ",ocs_filter$NumStudents)
) %>%
layout(barmode = "stack",
xaxis = list(title = "Country Name"),
yaxis = list(title = "Number of Students Abroad"))
})
# term bar chart
output$plot_term <- renderPlotly({
x_order <- list(categoryorder = "array",
categoryarray = c("2016-2017", "2017-2018", "2018-2019", "2019-2020", "2020-2021", "2021-2022", "2022-2023"))
plot_ly(ocs_term2_summary,
x = ~AcademicYear,
y = ~total_students,
color = ~ProgramTerm,
type = "bar",
text = ~ProgramTerm,
hoverinfo = "text",
hovertext = paste("Number of students abroad over", ocs_term2_summary$ProgramTerm,
": ", ocs_term2_summary$total_students)) %>%
layout(barmode = "stack",
xaxis = list(x_order,
title = "Academic Year"),
yaxis = list(title = "Total Students Abroad Each Year"))
})
output$lineplot <- renderPlot({
# Filter data based on selected regions
filtered_data <- d[d$ProgramRegion %in% input$region, ]
# Create line graph
ggplot(data = filtered_data, aes(x = ProgramYear, y = TripCount, color = ProgramRegion)) +
geom_line(size = 1) +
labs(x = "Year", y = "Trip Count", title = "Trip Count by Region Over Time") +
theme_minimal()
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
dataFile <- read.csv("https://raw.githubusercontent.com/hollerlu/IGE/main/Updated%20OCS%20Dataset")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
dataFile <- read.csv("https://raw.githubusercontent.com/hollerlu/IGE/main/Updated%20OCS%20Dataset")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
dataFile <- read.csv("https://raw.githubusercontent.com/hollerlu/IGE/main/Updated%20OCS%20Data%203-7.csv")
# Create a dataframe of countries and the number of students who have visited them
countryCounts <- dataFile %>%
group_by(ProgramRegion) %>%
summarise(TripCount = n(), ProgramNames = list(ProgramName))
library(ggplot2)
d <- dataFile %>%
group_by(ProgramRegion, ProgramYear) %>%
summarize(TripCount = n()) %>%
select(ProgramRegion, TripCount, ProgramYear)
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Line Graph"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("region", "Select Region(s):",
choices = unique(d$ProgramRegion),
selected = unique(d$ProgramRegion[d$ProgramRegion != "Europe"]))
),
mainPanel(
plotOutput("lineplot")
)
)
)
# Define server logic
server <- function(input, output) {
output$lineplot <- renderPlot({
# Filter data based on selected regions
filtered_data <- d[d$ProgramRegion %in% input$region, ]
# Create line graph
ggplot(data = filtered_data, aes(x = ProgramYear, y = TripCount, color = ProgramRegion)) +
geom_line(size = 1) +
labs(x = "Year", y = "Trip Count", title = "Trip Count by Region Over Time") +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
# libraries
library(magrittr)
library(tidyverse)
library(ggplot2)
library(tidyr)
library(dplyr)
library(shiny)
library(shinydashboard)
library(plotly)
library(lubridate)
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(leaflet)))
suppressWarnings(suppressMessages(library(maps)))
# suppressWarnings(suppressMessages(library(sf)))
library(RColorBrewer)
dataFile <- read.csv("https://raw.githubusercontent.com/hollerlu/IGE/main/Updated%20OCS%20Data%203-7.csv")
# subset program year and term
ocs_term2 <- subset(dataFile, select = c(AcademicYear,ProgramTerm))
# calculate student totals according to year/term criteria
ocs_term2_summary <- ocs_term2 %>%
group_by(AcademicYear,ProgramTerm) %>%
summarise(total_students = n(), .groups = "drop")
# head(ocs_term2_summary)
# Create a dataframe of countries and the number of students who have visited them
countryCounts <- dataFile %>%
group_by(ProgramRegion) %>%
summarise(TripCount = n(), ProgramNames = list(ProgramName))
d <- dataFile %>%
group_by(ProgramRegion, ProgramYear) %>%
summarize(TripCount = n()) %>%
select(ProgramRegion, TripCount, ProgramYear)
dataFile$ProgramCity <- gsub(",.*", "", dataFile$ProgramCity)
# UI
ui <- dashboardPage(
skin = "black",
# title
dashboardHeader(title = "OCS/IGE"),
# side bar options
dashboardSidebar(
sidebarMenu(
menuItem("Map Vis", tabName = "map"),
menuItem("Ethnicity Vis", tabName = "ethnicity"),
menuItem("Term Vis", tabName = "term"),
menuItem("Trip Count Vis", tabName = "linechart")
)
),
# body
dashboardBody(
tabItems(
tabItem(
tabName = "map",
h2("Off-Campus Programs Map"),
column(width = 12,
leafletOutput("map")
)),
tabItem(
tabName = "ethnicity",
h2("Ethnicity Per Region"),
# first playlist vis
fluidRow(
box(
# select first attribute and playlist
checkboxGroupInput("region", "Select Region(s):",
choices = unique(dataFile$ProgramRegion),
selected = unique(dataFile$ProgramRegion[dataFile$ProgramRegion != "Europe"])))
),
fluidRow(
box(
plotlyOutput("plot_ethnicity"))
)),
tabItem(tabName = "term",
h2("Term Abroad Per Year"),
fluidRow(
# box(
#   # select one attribute and two playlists (can be the same)
#   selectInput("distribution_plot_select",
#               label = "Select an attribute:",
#               choices = placement_cols)),
box(
plotlyOutput("plot_term"))
)),
tabItem(tabName = "linechart",
h2("Trip Count per Year"),
fluidRow(
box(
checkboxGroupInput("region", "Select Region(s):",
choices = unique(d$ProgramRegion),
selected = unique(d$ProgramRegion[d$ProgramRegion != "Europe"])))),
fluidRow(
box(
plotOutput("lineplot"))
))
)
)
)
# SERVER
server <- function(input, output) {
# Reading in the country information
cityMap <- read.csv("https://raw.githubusercontent.com/naramirezj/Off_Campus_Study_R/main/worldcities.csv")
activePrograms <- read.csv("https://raw.githubusercontent.com/hollerlu/IGE/main/OCS%2024-25%20Active%20Programs.csv", header = TRUE, stringsAsFactors = FALSE)
cityData <- dataFile %>%
filter(ProgramName %in% activePrograms$Program.Name) %>%
group_by(ProgramCity) %>%
mutate(TripCount = 0)
cityData <- merge(cityData, cityMap[, c("city", "country", "lat", "lng")],
by.x = c("ProgramCity", "CountryName"),
by.y = c("city", "country"), all.x = TRUE)
cityDataGrouped <- cityData %>%
group_by(ProgramCity) %>%
summarise(lat = first(lat),
lng = first(lng),
TripCount = n_distinct(ApplicationID))
na_cities <- cityData %>%
filter(is.na(lat) | is.na(lng)) %>%
select(ProgramCity, CountryName) %>%
distinct()
# View the list of cities with NA coordinates
print(na_cities)
#map
# Creating the map
output$map <- renderLeaflet({
# When a city is clicked on, makes a popup box that shows its name,
# how many visits it's had, and links to its active programs.
popupText <- lapply(seq(nrow(cityDataGrouped)), function(i) {
city <- cityDataGrouped$ProgramCity[i]
unique_programs <- unique(cityData$ProgramName[cityData$ProgramCity == city])
program_links <- paste("<a href='", activePrograms$TD.link[activePrograms$Program.Name %in% unique_programs], "'>", unique_programs, "</a>", collapse = "<br/>")
paste(
"City: ", city, "<br/>",
"Visits: ", cityDataGrouped$TripCount[cityDataGrouped$ProgramCity == city], "<br/>",
"Programs: ", paste(program_links, collapse = "<br/>"),
sep = ""
)
}) %>%
lapply(htmltools::HTML)
leaflet(options = leafletOptions(minZoom = 2)) %>%
addProviderTiles("CartoDB.Voyager") %>%
setView(lng = 0, lat = 20, zoom = 2) %>%
# Sets the limits of scrolling
setMaxBounds(lng1 = -180, lat1 = -90, lng2 = 180, lat2 = 90) %>%
addMarkers(data = cityDataGrouped,
lng = ~lng,
lat = ~lat,
popup = ~popupText,
clusterOptions = markerClusterOptions())
})
# ethnicity bar chart
output$plot_ethnicity <- renderPlotly({
ocs_filter <- dataFile %>%
filter(Ethnicity != "") %>%
filter(ProgramRegion %in% input$region) #%>%
# group_by(CountryName, Ethnicity) %>%
# summarise(NumStudents = n_distinct(X)) %>%
# ungroup()
plot_ly(ocs_filter,
x = ~CountryName,
color = ~Ethnicity,
type = "histogram"
# hoverinfo = "text",
#hovertext = paste("Number of students: ",ocs_filter$NumStudents)
) %>%
layout(barmode = "stack",
xaxis = list(title = "Country Name"),
yaxis = list(title = "Number of Students Abroad"))
})
# term bar chart
output$plot_term <- renderPlotly({
x_order <- list(categoryorder = "array",
categoryarray = c("2016-2017", "2017-2018", "2018-2019", "2019-2020", "2020-2021", "2021-2022", "2022-2023"))
plot_ly(ocs_term2_summary,
x = ~AcademicYear,
y = ~total_students,
color = ~ProgramTerm,
type = "bar",
text = ~ProgramTerm,
hoverinfo = "text",
hovertext = paste("Number of students abroad over", ocs_term2_summary$ProgramTerm,
": ", ocs_term2_summary$total_students)) %>%
layout(barmode = "stack",
xaxis = list(x_order,
title = "Academic Year"),
yaxis = list(title = "Total Students Abroad Each Year"))
})
output$lineplot <- renderPlot({
# Filter data based on selected regions
filtered_data <- d[d$ProgramRegion %in% input$region, ]
# Create line graph
ggplot(data = filtered_data, aes(x = ProgramYear, y = TripCount, color = ProgramRegion)) +
geom_line(size = 1) +
labs(x = "Year", y = "Trip Count", title = "Trip Count by Region Over Time") +
theme_minimal()
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
# libraries
library(magrittr)
library(tidyverse)
library(ggplot2)
library(tidyr)
library(dplyr)
library(shiny)
library(shinydashboard)
library(plotly)
library(lubridate)
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(leaflet)))
suppressWarnings(suppressMessages(library(maps)))
# suppressWarnings(suppressMessages(library(sf)))
library(RColorBrewer)
dataFile <- read.csv("https://raw.githubusercontent.com/hollerlu/IGE/main/Updated%20OCS%20Data%203-7.csv")
dataFile$ProgramCity <- gsub(",.*", "", dataFile$ProgramCity)
# subset program year and term
ocs_term2 <- subset(dataFile, select = c(AcademicYear,ProgramTerm))
# calculate student totals according to year/term criteria
ocs_term2_summary <- ocs_term2 %>%
group_by(AcademicYear,ProgramTerm) %>%
summarise(total_students = n(), .groups = "drop")
# head(ocs_term2_summary)
# Create a dataframe of countries and the number of students who have visited them
countryCounts <- dataFile %>%
group_by(ProgramRegion) %>%
summarise(TripCount = n(), ProgramNames = list(ProgramName))
d <- dataFile %>%
group_by(ProgramRegion, ProgramYear) %>%
summarize(TripCount = n()) %>%
select(ProgramRegion, TripCount, ProgramYear)
# UI
ui <- dashboardPage(
skin = "black",
# title
dashboardHeader(title = "OCS/IGE"),
# side bar options
dashboardSidebar(
sidebarMenu(
menuItem("Map Vis", tabName = "map"),
menuItem("Ethnicity Vis", tabName = "ethnicity"),
menuItem("Term Vis", tabName = "term"),
menuItem("Trip Count Vis", tabName = "linechart")
)
),
# body
dashboardBody(
tabItems(
tabItem(
tabName = "map",
h2("Off-Campus Programs Map"),
column(width = 12,
leafletOutput("map")
)),
tabItem(
tabName = "ethnicity",
h2("Ethnicity Per Region"),
# first playlist vis
fluidRow(
box(
# select first attribute and playlist
checkboxGroupInput("region", "Select Region(s):",
choices = unique(dataFile$ProgramRegion),
selected = unique(dataFile$ProgramRegion[dataFile$ProgramRegion != "Europe"])))
),
fluidRow(
box(
plotlyOutput("plot_ethnicity"))
)),
tabItem(tabName = "term",
h2("Term Abroad Per Year"),
fluidRow(
# box(
#   # select one attribute and two playlists (can be the same)
#   selectInput("distribution_plot_select",
#               label = "Select an attribute:",
#               choices = placement_cols)),
box(
plotlyOutput("plot_term"))
)),
tabItem(tabName = "linechart",
h2("Trip Count per Year"),
fluidRow(
box(
checkboxGroupInput("region", "Select Region(s):",
choices = unique(d$ProgramRegion),
selected = unique(d$ProgramRegion[d$ProgramRegion != c("Asia","Europe")])))),
fluidRow(
box(
plotOutput("lineplot"))
))
)
)
)
# SERVER
server <- function(input, output) {
# Reading in the country information
cityMap <- read.csv("https://raw.githubusercontent.com/naramirezj/Off_Campus_Study_R/main/worldcities.csv")
activePrograms <- read.csv("https://raw.githubusercontent.com/hollerlu/IGE/main/OCS%2024-25%20Active%20Programs.csv", header = TRUE, stringsAsFactors = FALSE)
cityData <- dataFile %>%
filter(ProgramName %in% activePrograms$Program.Name) %>%
group_by(ProgramCity) %>%
mutate(TripCount = 0)
cityData <- merge(cityData, cityMap[, c("city", "country", "lat", "lng")],
by.x = c("ProgramCity", "CountryName"),
by.y = c("city", "country"), all.x = TRUE)
cityDataGrouped <- cityData %>%
group_by(ProgramCity) %>%
summarise(lat = first(lat),
lng = first(lng),
TripCount = n_distinct(ApplicationID))
na_cities <- cityData %>%
filter(is.na(lat) | is.na(lng)) %>%
select(ProgramCity, CountryName) %>%
distinct()
# View the list of cities with NA coordinates
print(na_cities)
#map
# Creating the map
output$map <- renderLeaflet({
# When a city is clicked on, makes a popup box that shows its name,
# how many visits it's had, and links to its active programs.
popupText <- lapply(seq(nrow(cityDataGrouped)), function(i) {
city <- cityDataGrouped$ProgramCity[i]
unique_programs <- unique(cityData$ProgramName[cityData$ProgramCity == city])
program_links <- paste("<a href='", activePrograms$TD.link[activePrograms$Program.Name %in% unique_programs], "'>", unique_programs, "</a>", collapse = "<br/>")
paste(
"City: ", city, "<br/>",
"Visits: ", cityDataGrouped$TripCount[cityDataGrouped$ProgramCity == city], "<br/>",
"Programs: ", paste(program_links, collapse = "<br/>"),
sep = ""
)
}) %>%
lapply(htmltools::HTML)
leaflet(options = leafletOptions(minZoom = 2)) %>%
addProviderTiles("CartoDB.Voyager") %>%
setView(lng = 0, lat = 20, zoom = 2) %>%
# Sets the limits of scrolling
setMaxBounds(lng1 = -180, lat1 = -90, lng2 = 180, lat2 = 90) %>%
addMarkers(data = cityDataGrouped,
lng = ~lng,
lat = ~lat,
popup = ~popupText,
clusterOptions = markerClusterOptions())
})
# ethnicity bar chart
output$plot_ethnicity <- renderPlotly({
ocs_filter <- dataFile %>%
filter(Ethnicity != "") %>%
filter(ProgramRegion %in% input$region) #%>%
# group_by(CountryName, Ethnicity) %>%
# summarise(NumStudents = n_distinct(X)) %>%
# ungroup()
plot_ly(ocs_filter,
x = ~CountryName,
color = ~Ethnicity,
type = "histogram"
# hoverinfo = "text",
#hovertext = paste("Number of students: ",ocs_filter$NumStudents)
) %>%
layout(barmode = "stack",
xaxis = list(title = "Country Name"),
yaxis = list(title = "Number of Students Abroad"))
})
# term bar chart
output$plot_term <- renderPlotly({
x_order <- list(categoryorder = "array",
categoryarray = c("2016-2017", "2017-2018", "2018-2019", "2019-2020", "2020-2021", "2021-2022", "2022-2023"))
plot_ly(ocs_term2_summary,
x = ~AcademicYear,
y = ~total_students,
color = ~ProgramTerm,
type = "bar",
text = ~ProgramTerm,
hoverinfo = "text",
hovertext = paste("Number of students abroad over", ocs_term2_summary$ProgramTerm,
": ", ocs_term2_summary$total_students)) %>%
layout(barmode = "stack",
xaxis = list(x_order,
title = "Academic Year"),
yaxis = list(title = "Total Students Abroad Each Year"))
})
output$lineplot <- renderPlot({
# Filter data based on selected regions
filtered_data <- d[d$ProgramRegion %in% input$region, ]
# Create line graph
ggplot(data = filtered_data, aes(x = ProgramYear, y = TripCount, color = ProgramRegion)) +
geom_line(size = 1) +
labs(x = "Year", y = "Trip Count", title = "Trip Count by Region Over Time") +
theme_minimal()
})
}
shinyApp(ui, server)
library(shiny); runApp('~/Downloads/appDylan.R')
runApp('~/Downloads/appDylan.R')
df
View(df)
runApp('~/Downloads/appDylan.R')
runApp('~/Downloads/appDylan.R')
# create dataframe for gender visualization
data_aggregated <- dataFile %>%
group_by(ProgramRegion, Gender) %>%
summarise(Count = n(), .groups = "drop") %>%
ungroup()
# calculate top countries by total student count
top_countries <- data_aggregated %>%
group_by(ProgramRegion) %>%
summarise(Total = sum(Count), .groups = "drop") %>%
arrange(desc(Total)) %>%
slice_head(n = 5) %>%
pull(ProgramRegion)
View(data_aggregated)
runApp('~/Downloads/appDylan.R')
runApp('~/Downloads/appDylan.R')
runApp('~/Downloads/appDylan.R')
runApp()
runApp()
